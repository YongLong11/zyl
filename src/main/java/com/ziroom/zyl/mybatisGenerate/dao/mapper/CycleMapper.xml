<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ziroom.zyl.mybatisGenerate.dao.mapper.CycleMapper">
    <resultMap id="BaseResultMap" type="com.ziroom.zyl.mybatisGenerate.dao.entity.Cycle">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="cycle_name" jdbcType="VARCHAR" property="cycleName"/>
        <result column="start_date" jdbcType="TIMESTAMP" property="startDate"/>
        <result column="end_date" jdbcType="TIMESTAMP" property="endDate"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_id" jdbcType="VARCHAR" property="createId"/>
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime"/>
        <result column="modify_id" jdbcType="VARCHAR" property="modifyId"/>
        <result column="is_del" jdbcType="TINYINT" property="isDel"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , cycle_name, start_date, end_date, `type`, create_time, create_id, modify_time,
    modify_id, is_del
    </sql>
    <select id="selectByFilter" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.CycleCriteria"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from cycle
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from cycle
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from cycle
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByFilter" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.CycleCriteria">
        delete from cycle
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.Cycle">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into cycle (cycle_name, start_date, end_date,
        `type`, create_time, create_id,
        modify_time, modify_id, is_del
        )
        values (#{cycleName,jdbcType=VARCHAR}, #{startDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP},
        #{type,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{createId,jdbcType=VARCHAR},
        #{modifyTime,jdbcType=TIMESTAMP}, #{modifyId,jdbcType=VARCHAR}, #{isDel,jdbcType=TINYINT}
        )
    </insert>

    <insert id="insertBatch" parameterType="java.util.List">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into cycle (cycle_name, start_date, end_date,
        `type`, create_time, create_id,
        modify_time, modify_id, is_del
        )
        values
        <foreach item="cycle" index="index" collection="cycles" separator="," >
            (#{cycle.cycleName,jdbcType=VARCHAR}, #{cycle.startDate,jdbcType=TIMESTAMP},
            #{cycle.endDate,jdbcType=TIMESTAMP},
            #{cycle.type,jdbcType=TINYINT}, #{cycle.createTime,jdbcType=TIMESTAMP},
            #{cycle.createId,jdbcType=VARCHAR},
            #{cycle.modifyTime,jdbcType=TIMESTAMP}, #{cycle.modifyId,jdbcType=VARCHAR},
            #{cycle.isDel,jdbcType=TINYINT})
        </foreach>

    </insert>

    <insert id="insertSelective" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.Cycle">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into cycle
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cycleName != null">
                cycle_name,
            </if>
            <if test="startDate != null">
                start_date,
            </if>
            <if test="endDate != null">
                end_date,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createId != null">
                create_id,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="modifyId != null">
                modify_id,
            </if>
            <if test="isDel != null">
                is_del,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cycleName != null">
                #{cycleName,jdbcType=VARCHAR},
            </if>
            <if test="startDate != null">
                #{startDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="type != null">
                #{type,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createId != null">
                #{createId,jdbcType=VARCHAR},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyId != null">
                #{modifyId,jdbcType=VARCHAR},
            </if>
            <if test="isDel != null">
                #{isDel,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <select id="countByFilter" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.CycleCriteria"
            resultType="java.lang.Long">
        select count(*) from cycle
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByFilterSelective" parameterType="map">
        update cycle
        <set>
            <if test="record.id != null">

            </if>
            <if test="record.cycleName != null">
                cycle_name = #{record.cycleName,jdbcType=VARCHAR},
            </if>
            <if test="record.startDate != null">
                start_date = #{record.startDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.endDate != null">
                end_date = #{record.endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.type != null">
                `type` = #{record.type,jdbcType=TINYINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createId != null">
                create_id = #{record.createId,jdbcType=VARCHAR},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.modifyId != null">
                modify_id = #{record.modifyId,jdbcType=VARCHAR},
            </if>
            <if test="record.isDel != null">
                is_del = #{record.isDel,jdbcType=TINYINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByFilter" parameterType="map">
        update cycle
        set
        cycle_name = #{record.cycleName,jdbcType=VARCHAR},
        start_date = #{record.startDate,jdbcType=TIMESTAMP},
        end_date = #{record.endDate,jdbcType=TIMESTAMP},
        `type` = #{record.type,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        create_id = #{record.createId,jdbcType=VARCHAR},
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
        modify_id = #{record.modifyId,jdbcType=VARCHAR},
        is_del = #{record.isDel,jdbcType=TINYINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.Cycle">
        update cycle
        <set>
            <if test="cycleName != null">
                cycle_name = #{cycleName,jdbcType=VARCHAR},
            </if>
            <if test="startDate != null">
                start_date = #{startDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                end_date = #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createId != null">
                create_id = #{createId,jdbcType=VARCHAR},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyId != null">
                modify_id = #{modifyId,jdbcType=VARCHAR},
            </if>
            <if test="isDel != null">
                is_del = #{isDel,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ziroom.zyl.mybatisGenerate.dao.entity.Cycle">
        update cycle
        set cycle_name  = #{cycleName,jdbcType=VARCHAR},
            start_date  = #{startDate,jdbcType=TIMESTAMP},
            end_date    = #{endDate,jdbcType=TIMESTAMP},
            `type`      = #{type,jdbcType=TINYINT},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            create_id   = #{createId,jdbcType=VARCHAR},
            modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            modify_id   = #{modifyId,jdbcType=VARCHAR},
            is_del      = #{isDel,jdbcType=TINYINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>